
" Syntastic
"-----------------------------
"let g:syntastic_check_on_open=0 "ファイルを開いたときはチェックしない
let g:syntastic_check_on_save=1 "保存時にはチェック
let g:syntastic_auto_loc_list=1 "エラーがあったら自動でロケーションリストを開く
let g:syntastic_loc_list_height=6 "エラー表示ウィンドウの高さ
set statusline+=%#warningmsg# "エラーメッセージの書式
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_javascript_checkers = ['jshint'] "jshintを使う
let g:syntastic_mode_map = {
      \ 'mode': 'active',
      \ 'active_filetypes': ['ruby',  'javascript'],
      \ 'passive_filetypes': ['html', 'python']
      \ }
" AngularJSのためHTML警告を無視する. ng-以外も無視するならpassive_fileypesに
" htmlを記述するべきか。
" let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"エラー表示マークを変更
let g:syntastic_enable_signs=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
" 可能ならハイライト表示する
let g:syntastic_enable_highlighting=1

"----------------------------------------
"" NERDTree
"----------------------------------------
""<C-e>でNERDTreeをオンオフ。
nmap <silent> <C-e> ;NERDTreeToggle<CR>
vmap <silent> <C-e> <Esc>;NERDTreeToggle<CR>
omap <silent> <C-e> ;NERDTreeToggle<CR>
imap <silent> <C-e> <Esc>;NERDTreeToggle<CR>
cmap <silent> <C-e> <C-u>;NERDTreeToggle<CR>

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"キーマップの変更。コメント化と解除を行う。
nmap ,, <Plug>NERDCommenterToggle
vmap ,, <Plug>NERDCommenterToggle
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1
nnoremap    [unite]   <Nop>
" カンマの後にfを押すと[unite]になる
nmap    <Leader>f [unite]

" 分割しないでuniteのbufferを表示する
nnoremap [unite]u  :<C-u>Unite -no-split<Space>
" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>

"------------------------------------
" Quickrun
"------------------------------------
"Quickrunが実行していない場合には <C-c> を呼び出す
nnoremap <expr><silent> <C-c> quickrun#is_running() ?  quickrun#sweep_sessions() : "\<C-c>"

"------------------------------------
" Taglist-vim
"------------------------------------
set tags=tags
" 現在表示中のファイルのみのタグしか表示しない
let Tlist_Show_One_File = 1
" 右側にtag listのウインドウを表示する
let Tlist_Use_Right_Window = 1
" taglistのウインドウだけならVimを閉じる
let Tlist_Exit_OnlyWindow = 1
map <silent> <leader>l :TlistToggle<CR>

"------------------------------------
" Vim-markdown
"------------------------------------
let g:vim_markdown_folding_disabled = 1
" let g:vim_markdown_new_list_item_indent = 0
"------------------------------------
" Previm
"------------------------------------
autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown

"------------------------------------
" open-browser
"------------------------------------
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

"------------------------------------
" qfixapp
"------------------------------------
set runtimepath+=~/.vim/bundle/qfixhowm
let QFixHown_Key = 'g'

let howm_dir = '~/Dropbox/howm'
let howm_filename = '%Y/%m/%Y-%m-%d-%H%M%S.md'
let howm_fileencoding = 'utf-8'
let howm_fileformat = 'unix'

let QFixWin_EnableMode = 1
let QFix_UseLocationList = 1
let QFixHowm_MenuPreview = 1

let QFixHowm_FileType = 'markdown'
let QFixHowm_Title = '#'
set timeout timeoutlen=3000 ttimeoutlen=100

let calendar_jp = 0
" 全エントリ一覧表示(,a)でキャッシュを使用しない
let QFixHowm_TitleListCache = 0
" 新規エントリーのテンプレート
let QFixHowm_Template = [
 \"#%TAG%",
 \""
\]
" エントリーのタイムスタンプを更新日時にする
let QFixHowm_SaveTime = 2

"------------------------------------
" Previm
"------------------------------------
nnoremap <silent><Space><Space>p :PrevimOpen<CR>

"------------------------------------
" Neocomplecache
"------------------------------------
" AutoComplPopを無効にする
let g:acp_enableAtStartup = 0
" NeoComplCacheを有効にする
let g:neocomplcache_enable_at_startup = 1
" 補完が自動で開始される文字数
let g:neocomplcache_auto_completion_start_length = 3
" smarrt case有効化。 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplcache_enable_smart_case = 1
" camle caseを有効化。大文字を区切りとしたワイルドカードのように振る舞う
let g:neocomplcache_enable_camel_case_completion = 1
" _(アンダーバー)区切りの補完を有効化
let g:neocomplcache_enable_underbar_completion = 1
" シンタックスをキャッシュするときの最小文字長を3に
let g:neocomplcache_min_syntax_length = 3
" neocomplcacheを自動的にロックするバッファ名のパターン
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" -入力による候補番号の表示
let g:neocomplcache_enable_quick_match = 1
" 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
" let g:neocomplcache_enable_auto_select = 1
" ポップアップ削除 enable_auto_selectを有効にした場合、これを指定しないと補完
" が誤爆する
" inoremap <expr><C-h> neocomplcache#smart_close_popup().”\<C-h>”
" C-nでneocomplcache補完
" inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
" C-pでkeyword補完
" inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
" 補完候補が出ていたら確定、なければ改行
inoremap <expr><CR>  pumvisible() ? neocomplcache#close_popup() : "<CR>"
"ポップアップメニューで表示される候補の数。初期値は100
let g:neocomplcache_max_list = 20
" ユーザー定義スニペット保存ディレクトリ
let g:neocomplcache_snippets_dir = '~/dotfiles/snippets'
"------------------------------------
" Neosnippet
"------------------------------------
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/dotfiles/snippets'
" <TAB>: completion.
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Easy align interactive
vmap <Enter> <plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

