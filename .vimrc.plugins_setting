"-----------------------------
" Syntastic
"-----------------------------
"let g:syntastic_check_on_open=0 "ファイルを開いたときはチェックしない
let g:syntastic_check_on_save=1 "保存時にはチェック
let g:syntastic_auto_loc_list=1 "エラーがあったら自動でロケーションリストを開く
let g:syntastic_loc_list_height=6 "エラー表示ウィンドウの高さ
set statusline+=%#warningmsg# "エラーメッセージの書式
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_javascript_checkers = ['jshint'] "jshintを使う
let g:syntastic_mode_map = {
      \ 'mode': 'active',
      \ 'active_filetypes': ['ruby',  'javascript'],
      \ 'passive_filetypes': ['html']
      \ }
" AngularJSのためHTML警告を無視する. ng-以外も無視するならpassive_fileypesに
" htmlを記述するべきか。
" let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"エラー表示マークを変更
let g:syntastic_enable_signs=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
" 可能ならハイライト表示する
let g:syntastic_enable_highlighting=1

"----------------------------------------
"" NERDTree
"----------------------------------------
""<C-e>でNERDTreeをオンオフ。
nmap <silent> <C-e> ;NERDTreeToggle<CR>
vmap <silent> <C-e> <Esc>;NERDTreeToggle<CR>
omap <silent> <C-e> ;NERDTreeToggle<CR>
imap <silent> <C-e> <Esc>;NERDTreeToggle<CR>
cmap <silent> <C-e> <C-u>;NERDTreeToggle<CR>

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"キーマップの変更。コメント化と解除を行う。
nmap ,, <Plug>NERDCommenterToggle
vmap ,, <Plug>NERDCommenterToggle
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1
nnoremap    [unite]   <Nop>
" カンマの後にfを押すと[unite]になる
nmap    <Leader>f [unite]

" 分割しないでuniteのbufferを表示する
nnoremap [unite]u  :<C-u>Unite -no-split<Space>
" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>

"------------------------------------
" Quickrun
"------------------------------------
"Quickrunが実行していない場合には <C-c> を呼び出す
nnoremap <expr><silent> <C-c> quickrun#is_running() ?  quickrun#sweep_sessions() : "\<C-c>"

"------------------------------------
" Taglist-vim
"------------------------------------
set tags=tags
" 現在表示中のファイルのみのタグしか表示しない
let Tlist_Show_One_File = 1
" 右側にtag listのウインドウを表示する
let Tlist_Use_Right_Window = 1
" taglistのウインドウだけならVimを閉じる
let Tlist_Exit_OnlyWindow = 1
map <silent> <leader>l :TlistToggle<CR>


"------------------------------------
" Previm
"------------------------------------
augroup PrevimSettings
  autocmd!
  autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END


"------------------------------------
" qfixapp
"------------------------------------
set runtimepath+=~/.vim/bundle/qfixhowm
let QFixHown_Key = 'g'

let howm_dir = '~/Dropbox/howm'
let howm_filename = '%Y/%m/%Y-%m-%d-%H%M%S.md'
let howm_fileencoding = 'utf-8'
let howm_fileformat = 'unix'

let QFixWin_EnableMode = 1
let QFix_UseLocationList = 1
let QFixHowm_MenuPreview = 1

let QFixHowm_FileType = 'markdown'
let QFixHowm_Title = '#'
set timeout timeoutlen=3000 ttimeoutlen=100

let calendar_jp = 0
" 全エントリ一覧表示(,a)でキャッシュを使用しない
let QFixHowm_TitleListCache = 0
" 新規エントリーのテンプレート
let QFixHowm_Template = [
 \"#%TAG%",
 \""
\]
" エントリーのタイムスタンプを更新日時にする
let QFixHowm_SaveTime = 2



